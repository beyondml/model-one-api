swagger: "2.0"
info:
  description: "Model One can do almost anything that requires understanding or generating natural language."
  version: "0.1"
  title: "Model One API"
externalDocs:
  description: "About Model One"
  url: "https://beyond.ml/model-one"
host: "api.beyond.ml"
basePath: "/v0"
tags:
- name: "models"
  description: "Learn how to customize a model for your application."
- name: "files"
  description: "All about how to upload datasets."
schemes:
- "https"
paths:
  /models:
    post:
      tags:
      - "models"
      summary: "Create a new model."
      parameters:
      - in: "body"
        name: "body"
        description: "In the body of the request, the parameters for the new model are transmitted. Two types of models are currently supported: 'generator' and 'classifier'. In order to train a multiclass classification model, you should pass a `num_classes`."
        required: true
        schema:
          $ref: "#/definitions/CreateModelRequest"
      responses:
        "200":
          description: "Operation succeed. In case of success, the response will contain the description of the model. You will need the `model_name` from the response to continue using API."
          schema:
            $ref: "#/definitions/ModelInfo"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      
    get:
      tags:
      - "models"
      summary: "Returns information of all the created models."
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/Models"
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
  
  /models/{model_name}/status:
    get:
      tags:
      - "models"
      summary: "Returns information of the model with id {model_name}."
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      responses:
        "200":
          description: "Operation succeeded. Response contains the information of the model: id, status, etc."
          schema:
            $ref: "#/definitions/ModelInfo"
        "400":
          description: "Unknown handler. Use GET method for request."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
  
  /models/{model_name}/delete:
    delete:
      tags:
      - "models"
      summary: "Delete the model with id {model_name}."
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/ModelInfo"
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
      produces:
      - "application/json"
      security:
      - bearerAuth: []

  /models/{model_name}/fit:
    post:
      tags:
      - "models"
      summary: "Use the method to queue the model for training."
      description: "This action cannot be cancellled. The model is trained for several hours, to find out the status of the model, use the `/status` method. Before using this method, you need to upload datasets."

      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      responses:
        "200":
          description: "Operation succeeded. If succeeded the status of the model will be changed as `fit_requested`"
          schema:
            $ref: "#/definitions/ModelInfo"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
        "405":
          description: "Use POST method for request."
        "409":
          description: "Invalid API usage. Ensure the model has `fit_request` status."
      security:
      - bearerAuth: []
  
  /models/{model_name}/generate:
    get:
      tags:
      - "models"
      summary: "Inference model."
      description: "Generates data based on prefix. The prefix is passed as a request parameter. Before method usage ensure the model has been trained and has the status `ready`. This method can be used only for a model with type `generative`. For `classification` models, use the `classify` method."
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      - name: "input"
        in: "query"
        description: "Prefix used for data generation."
        required: true
        type: "string"
        
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/ApiGenerativeResponse"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
        "405":
          description: "Use GET method for request."
        "409":
          description: "Incorrect api usage. The model is not yet ready for use, so it is impossible to apply the method. The current status of the model could be found in the response."

          schema:
            $ref: "#/definitions/ApiGenerativeResponse"
      security:
      - bearerAuth: []
      
  /models/{model_name}/classify:
    get:
      tags:
      - "models"
      summary: "Inference model."
      description: "The prefix is passed as a request parameter. Before method usage ensure the model has been trained and has the status `ready`. This method can be used only for a model with type `classify`."
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      - name: "input"
        in: "query"
        description: "Input data."
        required: true
        type: "string"
        
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/ApiClassificationResponse"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
        "405":
          description: "Use GET method for request."
        "409":
          description: "Incorrect api usage. The model is not yet ready for use, so it is impossible to apply the method. The current status of the model could be found in the response."

          schema:
            $ref: "#/definitions/ApiGenerativeResponse"
      security:
      - bearerAuth: []
      
  
  /models/{model_name}/bind:
    post:
      tags:
      - "models"
      summary: "Use this method to bind the two async uploaded files with model."
      description: "The request must contains ids of uploaded files. This method checks that files are already ready and model type corresponds to file's task type."
      parameters:
      - name: "model_name"
        in: "path"
        description: "Model id."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/BindRequest"
        
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/ModelInfo"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "Model hasn't been found."
        "405":
          description: "Use POST method for request."
      security:
      - bearerAuth: []
      
  /files:
    post:
      tags:
      - "files"
      summary: "Create a new file."
      parameters:
      - in: "body"
        name: "body"
        description: "In the body of the request, the parameters for the new file are transmitted. Two task types are currently supported: 'generator' and 'classifier'"
        required: true
        schema:
          $ref: "#/definitions/CreateFileRequest"
      responses:
        "200":
          description: "Operation succeed. In case of success, the response will contain the description of the model. You will need the `model_name` from the response to continue using API."
          schema:
            $ref: "#/definitions/FileInfo"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      
    get:
      tags:
      - "files"
      summary: "Returns information of all the created files."
      responses:
        "200":
          description: "Operation succeeded."
          schema:
            $ref: "#/definitions/FilesInfo"
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
  
  /files/{file_id}/status:
    get:
      tags:
      - "files"
      summary: "Returns information of the model with id {file_id}."
      parameters:
      - name: "file_id"
        in: "path"
        description: "File id."
        required: true
        type: "string"
      responses:
        "200":
          description: "Operation succeeded. Response contains the information of the file: id, status, etc."
          schema:
            $ref: "#/definitions/FileInfo"
        "400":
          description: "Unknown handler. Use GET method for request."
        "401":
          description: "Authorization token is invalid."
        "404":
          description: "File hasn't been found."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
      
  /files/{file_id}/upload:
    post:
      tags:
      - "files"
      summary: "Is used to asynchronous upload training and validation dataset."
      description: "The generation tasktype uses the `inputs` and `outputs` fields. Arrays must be of equal length and have at least 32 examples. For the classification task, use `inputs` and `classes`. The `classes` column contains the target labels for classification."
      parameters:
      - name: "file_id"
        in: "path"
        description: "File id."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Dataset"
      responses:
        "200":
          description: "Operation succeed. In case of success, the response will contain the description of the model. You will need the `model_name` from the response to continue using API."
          schema:
            $ref: "#/definitions/FileInfo"
        "400":
          description: "Invalid request format."
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []
  
  /files/{file_id}/delete:
    delete:
      tags:
      - "files"
      summary: "Delete the file."
      parameters:
      - name: "file_id"
        in: "path"
        description: "File id."
        required: true
        type: "string"
      responses:
        "200":
          description: "Operation succeed."
          schema:
            $ref: "#/definitions/FileInfo"
        "401":
          description: "Authorization token is invalid."
      produces:
      - "application/json"
      security:
      - bearerAuth: []

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: "header"
    
definitions:
  ModelParams:
    type: "object"
    properties:
      train_iters:
        type: number
      num_classes:
        type: number
      
  CreateModelRequest:
    type: "object"
    properties:
      model_type:
        type: "string"
      model_params:
        $ref: "#/definitions/ModelParams"
      name:
        type: "string"
    required: 
      - model_type
      
  ModelInfo:
    type: "object"
    properties:
      model_name:
        type: "string"
      owner_id:
        type: "string"
      status:
        type: "string"
      model_type:
        type: "string"
          
  Models:
    type: "object"
    properties:
      models:
        type: "array"
        items:
          $ref: "#/definitions/ModelInfo"
          
  Dataset:
    type: object
    properties:
      inputs:
        type: "array"
        items:
          type: "string"
      outputs:
        type: "array"
        items:
          type: "string"
      classes:
        type: "array"
        items:
          type: "integer"
        
  Datasets:
    type: "object"
    properties:
      train_data:
        $ref: "#/definitions/Dataset"
      validate_data:
        $ref: "#/definitions/Dataset"
  
  GenerativeResult:
    type: "object"
    properties:
      response:
        type: string
  
  ApiGenerativeResponse:
    type: "object"
    properties:
      info:
        $ref: "#/definitions/ModelInfo"
      answer:
        type: "object"
        properties:
          responses:
            type: "array"
            items:
              $ref: "#/definitions/GenerativeResult"
      input:
        type: "array"
        items:
          type: "string"

  ClassificationResult:
    type: "array"
    items:
      type: number
  ApiClassificationResponse:
    type: "object"
    properties:
      info:
        $ref: "#/definitions/ModelInfo"
      answer:
        $ref: "#/definitions/ClassificationResult"
      input:
        type: "array"
        items:
          type: "string"
  
  CreateFileRequest:
    type: "object"
    properties:
      file_name:
        type: "string"
      task_type:
        type: "string"
    
  FileInfo:
    type: "object"
    properties:
      status:
        type: "string"
      file_name:
        type: "string"
      file_id:
        type: "string"
      task_type:
        type: "string"
  
  FilesInfo:
    type: "array"
    items:
      $ref: "#/definitions/FileInfo"
      
  BindRequest:
    type: "object"
    properties:
      train_file:
        type: "string"
      validate_file:
        type: "string"
